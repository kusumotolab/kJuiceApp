version: '3.8'

volumes:
  dbdata:

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: ./release.Dockerfile

  postgresql:
    image: postgres:15-alpine
    ports:
      - 5432:5432
    volumes:
      - dbdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: release-db
    restart: always

  backend:
    build:
      context: ./backend
      dockerfile: ./release.Dockerfile
    environment:
      TZ: Asia/Tokyo
      SLACK_TOKEN: ${SLACK_TOKEN}
      SLACK_CHANNEL: ${SLACK_CHANNEL}
    depends_on:
      - postgresql

  nginx:
    image: nginx:alpine
    ports:
      - '80:80'
    volumes:
      - type: bind
        source: ${KJA_LOCAL_WS-.}/nginx/default.conf
        target: /etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend
      - postgresql

  backup:
    build: ./backup
    init: true
    environment:
      PGUSER: admin
      PGPASSWORD: pass
      PGDATABASE: test-db
      PGHOST: postgresql
      BACKUP_HOST: ${BACKUP_HOST}
      BACKUP_USER: ${BACKUP_USER}
    volumes:
      - type: bind
        source: ${KJA_LOCAL_WS-.}/backup/cron-config
        target: /etc/crontabs/root
      - type: bind
        source: ${KJA_LOCAL_WS-.}/backup/backup.sh
        target: /root/backup.sh
      - type: bind
        source: ${KJA_LOCAL_WS-.}/secret/private_key
        target: /root/.ssh/private_key

  restore-db:
    image: postgres:15-alpine
    volumes:
      - dbdata:/var/lib/postgresql/data
      - ${KJA_LOCAL_WS-.}/restore.sql:/docker-entrypoint-initdb.d/restore.sql
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: test-db
    profiles:
      - restore
